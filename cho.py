import random

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup


TOKEN = "6325630703:AAHI2cinwNJXkvzI3QCn8OLVbAliGhxXiCU"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–°–µ–π—á–∞—Å –ø—Ä–æ–π–¥–µ—Ç —Ç–µ—Å—Ç –±–æ—è. –í—ã –±—É–¥–µ—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–æ—Ç–∏–≤ –ì—Ä–∞—Ö–æ–≥–º–æ—Ç–∞.")

    global character_name
    global character_damage
    global can_destroy_iron
    global character_max_hp
    global enemy_last_move
    global character_hp
    enemy_last_move = False
    can_destroy_iron = False
    character_damage = random.randint(40, 60)
    character_max_hp = 100
    character_hp = character_max_hp
    character_name = "–ò–æ–ª–∏"

    global enemy_damage
    global enemy_max_hp
    global enemy_hp
    enemy_max_hp = 250
    enemy_damage = random.randint(40, 60)
    enemy_hp = enemy_max_hp
    await fight_start(message)


async def fight_start(message: types.Message):
    global player_choosing_move_istrue
    player_choosing_move_istrue = True
    btn_atk = KeyboardButton('üó°Ô∏è–ê—Ç–∞–∫–∞üó°Ô∏è')
    btn_def = KeyboardButton('üõ°–ó–∞—â–∏—Ç–∞üõ°')
    btn_skill = KeyboardButton('üí•–ù–∞–≤—ã–∫–∏üí•')
    btn_itm = KeyboardButton('üß™–ü—Ä–µ–¥–º–µ—Ç—ãüß™')
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(btn_atk)
    keyboard.add(btn_def)
    keyboard.add(btn_skill)
    keyboard.add(btn_itm)

    await message.answer(f"""<b>–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è –ø—É—Å—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏.</b>
                         
{character_name} –Ω–∞—á–∏–Ω–∞–µ—Ç –±–æ–π!""", reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(text='üó°Ô∏è–ê—Ç–∞–∫–∞üó°Ô∏è')
async def handle_atack(message: types.Message):
    global player_choosing_move_istrue
    global player_choosing_target_istrue
    if player_choosing_move_istrue == True:
        player_choosing_target_istrue = True
        player_choosing_move_istrue = False
        btn_targ_1 = KeyboardButton('–ì–æ–ª–æ–≤–∞')
        btn_targ_2 = KeyboardButton('–ë—Ä—é—Ö–æ')
        btn_targ_3 = KeyboardButton('–õ–∞–ø—ã')
        btn_targ_4 = KeyboardButton('–ü–∞–Ω—Ü–∏—Ä—å')
        btn_targ_5 = KeyboardButton('–¶–µ–ø–∏')
        targets = ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        targets.add(btn_targ_1)
        targets.add(btn_targ_2)
        targets.add(btn_targ_3)
        targets.add(btn_targ_4)
        targets.add(btn_targ_5)
        await message.answer(f"{character_name} —Ü–µ–ª–∏—Ç—å—Å—è!", reply_markup=targets)


async def fight(message: types.Message):
    btn_atk = KeyboardButton('üó°Ô∏è–ê—Ç–∞–∫–∞üó°Ô∏è')
    btn_def = KeyboardButton('üõ°–ó–∞—â–∏—Ç–∞üõ°')
    btn_skill = KeyboardButton('üí•–ù–∞–≤—ã–∫–∏üí•')
    btn_itm = KeyboardButton('üß™–ü—Ä–µ–¥–º–µ—Ç—ãüß™')
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(btn_atk)
    keyboard.add(btn_def)
    keyboard.add(btn_skill)
    keyboard.add(btn_itm)
    await message.answer(f"""<b>–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ —Ç–µ–±—è –ø—É—Å—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏.</b>
                         
{character_name} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è—Ç—å—Å—è!""", reply_markup=keyboard, parse_mode='HTML')


async def enemy_move(message: types.Message):
    global enemy_last_move
    global enemy_hp
    global damage
    global miss
    enemy_move_choice = random.randint(1, 1)
    if enemy_move_choice == 1:
        global player_choosing_move_istrue
        enemy_attack_choice = random.randint(1, 2)
        if enemy_attack_choice == 1:
            if character_last_move == 'attack_had':
                damage = character_damage * 4
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –ø—Ä—è–º–æ –ø–æ –≥–æ–ª–æ–≤–µ! –ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Ä–µ–≤—ë—Ç –≤ –±–µ—â–µ–Ω—Å—Ç–≤–µ –∏ —Å —è—Ä–æ—Å—Ç—å—é —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ {character_name}.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                miss = random.randint(1, 100)
                if miss <= 80:
                    await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é. –ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º.")
                    enemy_last_move = 'bite'
                else:
                    await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                    enemy_last_move = 'bite'
            elif character_last_move == 'attack_belly':
                damage = character_damage
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} —Ä–∞–Ω–∏—Ç –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ –≤ –±—Ä—é—Ö–æ.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                enemy_last_move = 'bite'
            elif character_last_move == 'attack_paws':
                damage = character_damage
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ª–∏—à–∞–µ—Ç—Å—è –ª–∞–ø—ã –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —Ç–æ—á–Ω–æ–π –∞—Ç–∞–∫–∏ {character_name}.")
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                enemy_last_move = 'bite'
            elif character_last_move == 'attack_shell_completly':
                await message.answer(f"–ü—Ä–æ–±–∏–≤–∞—è –ø–∞–Ω—Ü–∏—Ä—å {character_name} –Ω–∞–Ω–æ—Å–∏—Ç –∫–∞–∫–∏–µ-–Ω–∏–∫–∞–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≥—Ä–∞—Ö–æ–≥–º–æ—Ç—É.")
                damage = character_damage
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                enemy_last_move = 'bite'
            elif character_last_move == 'attack_shell_uncompletly':
                await message.answer(f"–ü–æ—Å–ª—ã—à–∞–ª—Å—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω. –í–∏–¥–∏–º–æ, –ø–∞–Ω—Ü–∏—Ä—å –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ —è–≤–Ω–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–∑ –∂–µ–ª–µ–∑–∞ –∏–ª–∏ —á–µ–≥–æ —Ç–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ. –ù–µ—É–¥–∞—á–Ω–∞—è –∏ –¥–∞–∂–µ –≥–ª—É–ø–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç 0 —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                enemy_last_move = 'bite'
            elif character_last_move == 'attack_chains':
                await message.answer(f"–ü–∞–Ω—Ü–∏—Ä—å —Å–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è —Å –°—Ç—Ä–∞—Ö–æ–≥–º–æ—Ç–∞. –ï–≥–æ –±—Ä—é—Ö–æ –æ—á–µ–Ω—å —É—è–∑–≤–∏–º–æ...")
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                enemy_last_move = 'bite'
            elif character_last_move == 'attack_chains_uncompletly':
                damage = 0
                await message.answer(f"{character_name} –±—å–µ—Ç –ø–æ —Ü–µ–ø—è–º –∫—Ä–µ–ø—è—â–∏–µ –ø–∞–Ω—Ü–∏—Ä—å –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ –∫ —á—É–¥–∏—â—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–µ–∑—É—Å–ø–µ—à–Ω–æ.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}!")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                enemy_last_move = 'bite'
            elif character_last_move.endswith("_miss"):
                await message.answer(f"{character_name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!")
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–¥–µ–ª–∞–ª —Ä–µ–∑–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π –≤ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—É, —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –≤–æ –≤—Å—é –ø–∞—Å—Ç—å—é.")
                enemy_last_move = 'bite'
            player_choosing_move_istrue = True
            await fight(message)
        elif enemy_attack_choice == 2:
            if character_last_move == 'attack_had':
                damage = character_damage * 4
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç —É–¥–∞—Ä –ø—Ä—è–º–æ –ø–æ –≥–æ–ª–æ–≤–µ! –ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Ä–µ–≤—ë—Ç –≤ –±–µ—â–µ–Ω—Å—Ç–≤–µ –∏ —Å —è—Ä–æ—Å—Ç—å—é —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ {character_name}.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            elif character_last_move == 'attack_belly':
                damage = character_damage
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} —Ä–∞–Ω–∏—Ç –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ –≤ –±—Ä—é—Ö–æ.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            elif character_last_move == 'attack_paws':
                damage = character_damage
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ª–∏—à–∞–µ—Ç—Å—è –ª–∞–ø—ã –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —Ç–æ—á–Ω–æ–π –∞—Ç–∞–∫–∏ {character_name}.")
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            elif character_last_move == 'attack_shell_completly':
                await message.answer(f"–ü—Ä–æ–±–∏–≤–∞—è –ø–∞–Ω—Ü–∏—Ä—å {character_name} –Ω–∞–Ω–æ—Å–∏—Ç –∫–∞–∫–∏–µ-–Ω–∏–∫–∞–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≥—Ä–∞—Ö–æ–≥–º–æ—Ç—É.")
                damage = character_damage
                enemy_hp = enemy_hp - damage
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            elif character_last_move == 'attack_shell_uncompletly':
                await message.answer(f"–ü–æ—Å–ª—ã—à–∞–ª—Å—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω. –í–∏–¥–∏–º–æ, –ø–∞–Ω—Ü–∏—Ä—å –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ —è–≤–Ω–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–∑ –∂–µ–ª–µ–∑–∞ –∏–ª–∏ —á–µ–≥–æ —Ç–æ –ø–æ–¥–æ–±–Ω–æ–≥–æ. –ù–µ—É–¥–∞—á–Ω–∞—è –∏ –¥–∞–∂–µ –≥–ª—É–ø–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–≤–µ–Ω—á–∞–ª–∞—Å—å —É—Å–ø–µ—Ö–æ–º.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}.")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            elif character_last_move == 'attack_chains':
                await message.answer(f"–ü–∞–Ω—Ü–∏—Ä—å —Å–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è —Å –°—Ç—Ä–∞—Ö–æ–≥–º–æ—Ç–∞. –ï–≥–æ –±—Ä—é—Ö–æ –æ—á–µ–Ω—å —É—è–∑–≤–∏–º–æ...")
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            elif character_last_move == 'attack_chains_uncompletly':
                damage = 0
                await message.answer(f"{character_name} –±—å–µ—Ç –ø–æ —Ü–µ–ø—è–º –∫—Ä–µ–ø—è—â–∏–µ –ø–∞–Ω—Ü–∏—Ä—å –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ –∫ —á—É–¥–∏—â—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–µ–∑—É—Å–ø–µ—à–Ω–æ.")
                await message.answer(f"{character_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã –≥—Ä–∞—Ö–æ–≥–º–æ—Ç–∞ {enemy_hp}/{enemy_max_hp}!")
                if enemy_hp <= 0:
                    await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
                    return
                else:
                    pass
                await message.answer(f"–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—è {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            elif character_last_move.endswith("_miss"):
                await message.answer(f"{character_name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!")
                await message.answer(f"–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –ø—Ä–æ–º–∞—Ö–æ–º {character_name}, –≥—Ä–∞—Ö–æ–≥–º–æ—Ç –ø–æ—à—ë–ª –Ω–∞ —Ç–∞—Ä–∞–Ω, —Å–±–∏–≤–∞—è —Ç–æ–≥–æ —Å –Ω–æ–≥.")
                enemy_last_move = 'ram'
            player_choosing_move_istrue = True
            await fight(message)
    elif enemy_move_choice == 2:
        enemy_defense_choice = random.randint(1, 2)
        if enemy_defense_choice == 1:
            player_choosing_move_istrue = True
            await fight(message)
        elif enemy_defense_choice == 2:
            player_choosing_move_istrue = True
            await fight(message)


@dp.message_handler(text='–ì–æ–ª–æ–≤–∞')
async def handle_algebra(message: types.Message):
    global player_choosing_target_istrue
    if player_choosing_target_istrue == True:
        global character_last_move
        global enemy_hp
        global miss
        global character_hp
        player_choosing_target_istrue = False
        if enemy_last_move == False:
            pass
        elif enemy_last_move == 'bite':
            miss = random.randint(1, 100)
            if miss <= 70:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 35
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ø—Ä–æ–∫—É—Å—ã–≤–∞–µ—Ç –ø–ª–æ—Ç—å {character_name}! {character_name} –æ—Ä—ë—Ç –æ—Ç –±–æ–ª–∏.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        elif enemy_last_move == 'ram':
            miss = random.randint(1, 100)
            if miss <= 40:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 25
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–±–∏–≤–∞–µ—Ç —Å –Ω–æ–≥ {character_name}. –û–Ω –ª–æ–º–∞–µ—Ç –∫–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É—è–∑–≤–∏–º.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        if enemy_hp <= 0:
            await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
            return
        else:
            pass
        if character_hp <= 0:
            await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
            return
        else:
            miss = random.randint(1, 100)
            if miss <= 80:
                character_last_move = 'attack_had_miss'
                await enemy_move(message)
            else:
                character_last_move = 'attack_had'
                await enemy_move(message)


@dp.message_handler(text='–ë—Ä—é—Ö–æ')
async def handle_algebra(message: types.Message):
    global player_choosing_target_istrue
    if player_choosing_target_istrue == True:
        global character_last_move
        global enemy_hp
        global miss
        global character_hp
        player_choosing_target_istrue = False
        if enemy_last_move == False:
            pass
        elif enemy_last_move == 'bite':
            miss = random.randint(1, 100)
            if miss <= 70:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 35
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ø—Ä–æ–∫—É—Å—ã–≤–∞–µ—Ç –ø–ª–æ—Ç—å {character_name}! {character_name} –æ—Ä—ë—Ç –æ—Ç –±–æ–ª–∏.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        elif enemy_last_move == 'ram':
            miss = random.randint(1, 100)
            if miss <= 40:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 25
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–±–∏–≤–∞–µ—Ç —Å –Ω–æ–≥ {character_name}. –û–Ω –ª–æ–º–∞–µ—Ç –∫–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É—è–∑–≤–∏–º.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        if enemy_hp <= 0:
            await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
            return
        else:
            pass
        if character_hp <= 0:
            await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
            return
        else:
            miss = random.randint(1, 100)
            if miss <= 20:
                character_last_move = 'attack_belly_miss'
                await enemy_move(message)
            else:
                character_last_move = 'attack_belly'
                await enemy_move(message)


@dp.message_handler(text='–õ–∞–ø—ã')
async def handle_algebra(message: types.Message):
    global player_choosing_target_istrue
    if player_choosing_target_istrue == True:
        global character_last_move
        global enemy_hp
        global miss
        global character_hp
        player_choosing_target_istrue = False
        if enemy_last_move == False:
            pass
        elif enemy_last_move == 'bite':
            miss = random.randint(1, 100)
            if miss <= 70:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 35
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ø—Ä–æ–∫—É—Å—ã–≤–∞–µ—Ç –ø–ª–æ—Ç—å {character_name}! {character_name} –æ—Ä—ë—Ç –æ—Ç –±–æ–ª–∏.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        elif enemy_last_move == 'ram':
            miss = random.randint(1, 100)
            if miss <= 40:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 25
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–±–∏–≤–∞–µ—Ç —Å –Ω–æ–≥ {character_name}. –û–Ω –ª–æ–º–∞–µ—Ç –∫–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É—è–∑–≤–∏–º.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        if enemy_hp <= 0:
            await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
            return
        else:
            pass
        if character_hp <= 0:
            await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
            return
        else:
            miss = random.randint(1, 100)
            if miss <= 30:
                character_last_move = 'attack_paws_miss'
                await enemy_move(message)
            else:
                character_last_move = 'attack_paws'
                await enemy_move(message)


@dp.message_handler(text='–ü–∞–Ω—Ü–∏—Ä—å')
async def handle_algebra(message: types.Message):
    global player_choosing_target_istrue
    if player_choosing_target_istrue == True:
        global character_last_move
        global enemy_hp
        global enemy_last_move
        global character_hp
        player_choosing_target_istrue = False
        if enemy_last_move == False:
            pass
        elif enemy_last_move == 'bite':
            miss = random.randint(1, 100)
            if miss <= 70:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 35
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ø—Ä–æ–∫—É—Å—ã–≤–∞–µ—Ç –ø–ª–æ—Ç—å {character_name}! {character_name} –æ—Ä—ë—Ç –æ—Ç –±–æ–ª–∏.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        elif enemy_last_move == 'ram':
            miss = random.randint(1, 100)
            if miss <= 40:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 25
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–±–∏–≤–∞–µ—Ç —Å –Ω–æ–≥ {character_name}. –û–Ω –ª–æ–º–∞–µ—Ç –∫–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É—è–∑–≤–∏–º.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        if enemy_hp <= 0:
            await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
            return
        else:
            pass
        if character_hp <= 0:
            await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
            return
        else:
            if can_destroy_iron:
                character_last_move = 'attack_shell_completly'
                await enemy_move(message)
            else:
                character_last_move = 'attack_shell_uncompletly'
                await enemy_move(message)


@dp.message_handler(text='–¶–µ–ø–∏')
async def handle_algebra(message: types.Message):
    global player_choosing_target_istrue
    if player_choosing_target_istrue == True:
        global character_last_move
        global enemy_hp
        global miss
        global character_hp
        player_choosing_target_istrue = False
        if enemy_last_move == False:
            pass
        elif enemy_last_move == 'bite':
            miss = random.randint(1, 100)
            if miss <= 70:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 35
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ø—Ä–æ–∫—É—Å—ã–≤–∞–µ—Ç –ø–ª–æ—Ç—å {character_name}! {character_name} –æ—Ä—ë—Ç –æ—Ç –±–æ–ª–∏.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        elif enemy_last_move == 'ram':
            miss = random.randint(1, 100)
            if miss <= 40:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 25
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–±–∏–≤–∞–µ—Ç —Å –Ω–æ–≥ {character_name}. –û–Ω –ª–æ–º–∞–µ—Ç –∫–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É—è–∑–≤–∏–º.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        if enemy_hp <= 0:
            await message.answer("–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–≤–∞–ª–∏–ª—Å—è –±–µ–∑ –∂–∏–∑–Ω–∏.")
            return
        else:
            pass
        if character_hp <= 0:
            await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
            return
        else:
            miss = random.randint(1, 100)
            if miss <= 40:
                character_last_move = 'attack_chains_miss'
                await enemy_move(message)
            else:
                if can_destroy_iron:
                    character_last_move = 'attack_chains'
                    await enemy_move(message)
                else:
                    character_last_move = 'attack_chains_uncompletly'
                    await enemy_move(message)


@dp.message_handler(text='üõ°–ó–∞—â–∏—Ç–∞üõ°')
async def handle_geometry(message: types.Message):
    global player_choosing_move_istrue
    global player_choosing_def_istrue
    if player_choosing_move_istrue == True:
        player_choosing_def_istrue = True
        player_choosing_move_istrue = False
        btn_def_1 = KeyboardButton('–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ')
        btn_def_2 = KeyboardButton('–£–∫–ª–æ–Ω–µ–Ω–∏–µ')
        targets = ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        targets.add(btn_def_1)
        targets.add(btn_def_2)
        await message.answer(f"{character_name} –Ω–µ —Å–ø–µ—à–∏—Ç –∏–¥—Ç–∏ –≤ –∞—Ç–∞–∫—É.", reply_markup=targets)


@dp.message_handler(text='–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ')
async def handle_algebra(message: types.Message):
    global player_choosing_def_istrue
    if player_choosing_def_istrue == True:
        global character_last_move
        global enemy_hp
        global miss
        global character_hp
        player_choosing_def_istrue = False
        if enemy_last_move == False:
            ###–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê –ò–ó–ú–ï–ù–ò
            ###–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê –ò–ó–ú–ï–ù–ò
            ###–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê–ê –ò–ó–ú–ï–ù–ò
            –ê
        elif enemy_last_move == 'bite':
            miss = random.randint(1, 100)
            if miss <= 70:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 35
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –ø—Ä–æ–∫—É—Å—ã–≤–∞–µ—Ç –ø–ª–æ—Ç—å {character_name}! {character_name} –æ—Ä—ë—Ç –æ—Ç –±–æ–ª–∏.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass
        elif enemy_last_move == 'ram':
            miss = random.randint(1, 100)
            if miss <= 40:
                await message.answer(f"–ö —Å—á–∞—Å—Ç—å—é –¥–ª—è {character_name} –º–æ–Ω—Å—Ç—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è –∏ —Å—Ç–∞–ª —É—è–∑–≤–∏–º –¥–ª—è –∞—Ç–∞–∫–∏.")
            else:
                damage = 25
                character_hp = character_hp - damage
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç —Å–±–∏–≤–∞–µ—Ç —Å –Ω–æ–≥ {character_name}. –û–Ω –ª–æ–º–∞–µ—Ç –∫–æ—Å—Ç–∏ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —É—è–∑–≤–∏–º.")
                await message.answer(f"–ì—Ä–∞—Ö–æ–≥–º–æ—Ç –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞. –¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–∏–ª—ã {character_name} {character_hp}/{character_max_hp}.")
                if character_hp <= 0:
                    await message.answer("–í—ã —É–º–µ—Ä–ª–∏!")
                    return
                else:
                    pass


@dp.message_handler(text='üí•–ù–∞–≤—ã–∫–∏üí•')
async def handle_exercises(message: types.Message):
    if player_choosing_move_istrue == True:
        player_choosing_move_istrue = False
        await message.answer("–¢—ã –≤—ã–±—Ä–∞–ª –ù–∞–≤—ã–∫–∏!")


@dp.message_handler(text='üß™–ü—Ä–µ–¥–º–µ—Ç—ãüß™')
async def handle_formulas(message: types.Message):
    if player_choosing_move_istrue == True:
        player_choosing_move_istrue = False
        await message.answer("–¢—ã –≤—ã–±—Ä–∞–ª –ü—Ä–µ–¥–º–µ—Ç—ã!")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
